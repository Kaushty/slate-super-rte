{"version":3,"sources":["super-charged-rte/src/components/Buttons/buttonLoader.js","super-charged-rte/src/components/Icons/icon.js","super-charged-rte/src/utils/index.js","super-charged-rte/src/components/Buttons/buttons.js","super-charged-rte/src/components/Toolbar/toolbarLoader.js","super-charged-rte/src/components/Toolbar/index.js","super-charged-rte/src/elements/paragraph/createDraggable.js","super-charged-rte/src/elements/paragraph/renderElement.js","super-charged-rte/src/elements/paragraph/renderLeaf.js","super-charged-rte/src/elements/index.js","super-charged-rte/src/index.js","demo/layout.js","demo/app.js","index.js"],"names":["Button","React","forwardRef","ref","className","active","reversed","props","cx","css","Icon","LIST_TYPES","isBlockActive","editor","format","Editor","nodes","match","n","type","toggleMark","isMarkActive","removeMark","addMark","marks","BlockButton","icon","useSlate","onMouseDown","event","preventDefault","isActive","isList","includes","Transforms","unwrapNodes","split","setNodes","block","children","wrapNodes","toggleBlock","MarkButton","Menu","Toolbar","Toolbar_Loader","ContainerView","styled","div","DraggableElement","draggableId","index","key","provided","innerRef","draggableProps","dragHandleProps","style","marginTop","Element","attributes","element","constStyle","margin","padding","width","value","state","path","childNode","at","length","node","JSON","stringify","getPath","Leaf","leaf","bold","code","italic","underline","renderElement","useCallback","properties","renderLeaf","HOTKEYS","myStyle","userSelect","onKeyDown","hotkey","isHotkey","droppableId","droppableProps","placeholder","spellCheck","autoFocus","RichTextEditor","setState","useMemo","withHistory","withReact","createEditor","onDragEnd","result","destination","source","oldState","Array","from","splice","moveNodes","to","onChange","initialValue","text","Layout","useState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31b97424.chunk.js","sourcesContent":["import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Button = React.forwardRef(\r\n  ({ className, active, reversed, ...props }, ref) => (\r\n    <span\r\n      {...props}\r\n      ref={ref}\r\n      className={cx(\r\n        className,\r\n        css`\r\n          cursor: pointer;\r\n          color: ${reversed\r\n            ? active\r\n              ? 'white'\r\n              : '#aaa'\r\n            : active\r\n            ? 'black'\r\n            : '#a9a9a9'};\r\n          background-color: \r\n          font-weight: 800;\r\n          border: 1.3px solid #a9a9a9;\r\n          padding: 5px;\r\n          margin: 2px;\r\n          border-radius: 5px;\r\n        `\r\n      )}\r\n    />\r\n  )\r\n)\r\n\r\nexport default Button","import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Icon = React.forwardRef(({ className, ...props }, ref) => (\r\n    <span\r\n      {...props}\r\n      ref={ref}\r\n      className={cx(\r\n        'material-icons',\r\n        className,\r\n        css`\r\n          font-size: 18px;\r\n          vertical-align: middle;\r\n          text-align: center;\r\n          ${className}:hover {\r\n            color: 'red';\r\n          }\r\n        `\r\n      )}\r\n    />\r\n  ))\r\n\r\n  export default Icon","import { Editor, Transforms } from 'slate'\r\n\r\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\r\n\r\nexport const isBlockActive = (editor, format) => {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: n => n.type === format,\r\n    })\r\n  \r\n    return !!match\r\n}\r\n\r\nexport const toggleBlock = (editor, format) => {\r\n    const isActive = isBlockActive(editor, format)\r\n    const isList = LIST_TYPES.includes(format)\r\n  \r\n    Transforms.unwrapNodes(editor, {\r\n      match: n => LIST_TYPES.includes(n.type),\r\n      split: true,\r\n    })\r\n  \r\n    Transforms.setNodes(editor, {\r\n      type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n    })\r\n  \r\n    if (!isActive && isList) {\r\n      const block = { type: format, children: [] }\r\n      Transforms.wrapNodes(editor, block)\r\n    }\r\n}\r\n\r\nexport const toggleMark = (editor, format) => {\r\n    const isActive = isMarkActive(editor, format)\r\n  \r\n    if (isActive) {\r\n      Editor.removeMark(editor, format)\r\n    } else {\r\n      Editor.addMark(editor, format, true)\r\n    }\r\n} \r\n\r\nexport const isMarkActive = (editor, format) => {\r\n    const marks = Editor.marks(editor)\r\n    return marks ? marks[format] === true : false\r\n}\r\n  ","import React from 'react'\r\nimport { useSlate } from 'slate-react'\r\n\r\nimport Button from './buttonLoader'\r\nimport Icon from '../Icons/icon'\r\nimport { toggleMark, toggleBlock, isMarkActive, isBlockActive } from '../../utils'\r\n\r\nexport const BlockButton = ({ format, icon }) => {\r\n    const editor = useSlate()\r\n    return (\r\n      <Button\r\n        active={isBlockActive(editor, format)}\r\n        onMouseDown={event => {\r\n          event.preventDefault()\r\n          toggleBlock(editor, format)\r\n        }}\r\n      >\r\n        <Icon>{icon}</Icon>\r\n      </Button>\r\n    )\r\n  }\r\n  \r\n  export const MarkButton = ({ format, icon }) => {\r\n    const editor = useSlate()\r\n    return (\r\n      <Button\r\n        active={isMarkActive(editor, format)}\r\n        onMouseDown={event => {\r\n          event.preventDefault()\r\n          toggleMark(editor, format)\r\n        }}\r\n      >\r\n        <Icon>{icon}</Icon>\r\n      </Button>\r\n    )\r\n  }\r\n  ","import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Menu = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      className,\r\n      css`\r\n        & > * {\r\n          display: inline-block;\r\n        }\r\n        & > * + * {\r\n          margin-left: 15px;\r\n        }\r\n      `\r\n    )}\r\n  />\r\n))\r\n\r\nconst Toolbar = React.forwardRef(({ className, ...props }, ref) => (\r\n  <Menu\r\n    {...props}\r\n    ref={ref}\r\n    className={cx(\r\n      className,\r\n      css`\r\n        position: relative;\r\n        padding: 10px;\r\n        margin: 10px 20px 20px ;\r\n        border: 2px solid #e1e1e1;\r\n        text-align: center;\r\n        border-radius: 5px;\r\n      `\r\n    )}\r\n  />\r\n))\r\n\r\nexport default Toolbar","import React from 'react'\r\n\r\nimport { MarkButton, BlockButton } from '../Buttons/buttons'\r\nimport Toolbar from './toolbarLoader'\r\n\r\nconst Toolbar_Loader = () => {\r\n    return(\r\n        <Toolbar className={'toolbar'}>\r\n            <MarkButton format=\"bold\" icon=\"format_bold\" />\r\n            <MarkButton format=\"italic\" icon=\"format_italic\" />\r\n            <MarkButton format=\"underline\" icon=\"format_underlined\" />\r\n            <MarkButton format=\"code\" icon=\"code\" />\r\n            <BlockButton format=\"heading-one\" icon=\"looks_one\" />\r\n            <BlockButton format=\"heading-two\" icon=\"looks_two\" />\r\n            <BlockButton format=\"block-quote\" icon=\"format_quote\" />\r\n            <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\r\n            <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\r\n        </Toolbar>\r\n    )\r\n}\r\n\r\nexport default Toolbar_Loader","import React from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\n\r\n/*\r\nconst DragDiv = styled.div`\r\n    display: flex;\r\n    margin: 0;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n`\r\n\r\nconst DragHandle = styled.div`\r\n    width: 10px;\r\n    height: 10px;\r\n    margin-right: 10px;\r\n    background-color: green;\r\n    opacity: 0;\r\n    transition: 0.2s ease-out all;\r\n\r\n    ${DragDiv}:hover & {\r\n        display: block;\r\n        opacity: 0.7;\r\n    }\r\n`\r\n*/\r\n\r\nconst ContainerView = styled.div`\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 2px;\r\n`\r\n\r\nconst DraggableElement  = (props) => {\r\n    return (\r\n        <Draggable draggableId={`${props.index}`} key={props.index} index={props.index}>\r\n            {\r\n                provided => (                  \r\n                    <ContainerView className='container' \r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}    \r\n                        \r\n                    >                   \r\n                        <div {...provided.dragHandleProps} style={{marginTop: '10px'}}>\r\n                            {props.children}\r\n                        </div>\r\n                    </ContainerView>\r\n                )\r\n            }\r\n\r\n        </Draggable>        \r\n    )\r\n}\r\n\r\n/*\r\nconst withDraggableIcon  = (props) => {\r\n    return (\r\n        <Draggable draggableId={`${props.index}`} key={props.index} index={props.index}>\r\n            {\r\n                provided => (\r\n                    <DragDiv         \r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}                \r\n                    >\r\n                        <DragHandle                                                                      \r\n                            {...provided.dragHandleProps}\r\n                        />\r\n                        {props.children}\r\n                    </DragDiv>    \r\n                )\r\n            }\r\n\r\n        </Draggable>        \r\n    )\r\n}\r\n*/\r\n\r\nexport default DraggableElement\r\n","import React from 'react'\r\nimport { Editor } from 'slate'\r\nimport { useSlate } from 'slate-react'\r\n\r\nimport DraggableElement from './createDraggable'\r\n\r\nconst Element = ({ attributes, children, element, ...rest }) => {\r\n    const constStyle = {\r\n        margin: '0',\r\n        padding: '0px',     \r\n        width: '100%',   \r\n    } \r\n    \r\n    const value = rest.state\r\n    const editor = useSlate()\r\n\r\n    const getPath = (childNode) => {\r\n        for (const [node, path] of Editor.nodes(editor, { at: value.length })) {\r\n            if (JSON.stringify(node) === JSON.stringify(childNode)) {\r\n                return path;\r\n            }\r\n        }\r\n    }\r\n\r\n    const path = getPath(element)\r\n    // const point = { path: [0, 0], offset: 0 };\r\n    // editor.selection = { anchor: point, focus: point };\r\n    // console.log(element)\r\n\r\n    switch (element.type) {\r\n        case 'block-quote':            \r\n            return (\r\n                <DraggableElement index={path[0]} >\r\n                    <blockquote style={constStyle} {...attributes}>{children}</blockquote>\r\n                </DraggableElement>\r\n            )\r\n        case 'bulleted-list':\r\n            return (\r\n                <DraggableElement index={path[0]} >\r\n                    <ul {...attributes} style={constStyle}>{children}</ul>\r\n                </DraggableElement>\r\n            )\r\n        case 'heading-one':\r\n            return(\r\n                <DraggableElement index={path[0]} >\r\n                    <h1 {...attributes} style={constStyle}>{children}</h1>\r\n                </DraggableElement>\r\n            )\r\n        case 'heading-two':\r\n            return(                \r\n                <DraggableElement index={path[0]} >\r\n                    <h2 {...attributes} style={constStyle}>{children}</h2>      \r\n                </DraggableElement>\r\n            ) \r\n        case 'list-item':\r\n            return(                                \r\n                <li {...attributes} style={constStyle}>{children}</li>                      \r\n            ) \r\n        case 'numbered-list':\r\n            return(                \r\n                <DraggableElement index={path[0]} >\r\n                    <ol {...attributes} style={constStyle} >{children}</ol>      \r\n                </DraggableElement>\r\n            )   \r\n        default:\r\n            return(                \r\n                <DraggableElement index={path[0]} >\r\n                    <p {...attributes} style={constStyle}>{children}</p>      \r\n                </DraggableElement>\r\n            ) \r\n    }\r\n}\r\n\r\nexport default Element","import React from 'react'\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n    if (leaf.bold) {\r\n      children = <strong>{children}</strong>\r\n    }\r\n  \r\n    if (leaf.code) {\r\n      children = <code>{children}</code>\r\n    }\r\n  \r\n    if (leaf.italic) {\r\n      children = <em>{children}</em>\r\n    }\r\n  \r\n    if (leaf.underline) {\r\n      children = <u>{children}</u>\r\n    }\r\n\r\n    return <span {...attributes}>{children}</span>\r\n}\r\n  \r\nexport default Leaf","import React, { useCallback } from 'react'\r\nimport { Editable, useSlate } from 'slate-react';\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport isHotkey from 'is-hotkey'\r\n\r\nimport Element from './paragraph/renderElement'\r\nimport Leaf from './paragraph/renderLeaf'\r\nimport {toggleMark } from '../utils'\r\n\r\nconst Editor = (props) => {\r\n    const renderElement = useCallback((properties) => <Element {...properties} state={props.state}/>, [])\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n    const editor = useSlate();\r\n\r\n    const HOTKEYS = {\r\n        'mod+b': 'bold',\r\n        'mod+i': 'italic',\r\n        'mod+u': 'underline',\r\n        'mod+`': 'code',\r\n    }\r\n\r\n    const myStyle = {\r\n        margin: '0 50px',\r\n        userSelect: \"none\",\r\n      }\r\n    \r\n    const onKeyDown = event => {\r\n        for (const hotkey in HOTKEYS) {\r\n          if (isHotkey(hotkey, event)) {\r\n            event.preventDefault()\r\n            const mark = HOTKEYS[hotkey]\r\n            toggleMark(editor, mark)\r\n          }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Droppable droppableId=\"supereditor-list\" >\r\n        {\r\n          (provided) => (\r\n            <div ref={provided.innerRef} {...provided.droppableProps}>\r\n              <Editable\r\n                renderElement={renderElement}\r\n                renderLeaf={renderLeaf}\r\n                placeholder=\"Enter some rich text…\"\r\n                spellCheck\r\n                autoFocus\r\n                onKeyDown={onKeyDown}\r\n                style={myStyle}\r\n              />\r\n              {provided.placeholder}\r\n          </div>\r\n          )\r\n        }            \r\n      </Droppable>\r\n    )\r\n}\r\n\r\nexport default Editor","import React, { useMemo } from 'react'\r\nimport { withReact, Slate } from 'slate-react'\r\nimport { createEditor, Transforms } from 'slate'\r\nimport { withHistory } from 'slate-history'\r\n\r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\n\r\nimport Toolbar from './components/Toolbar'\r\nimport Editor from './elements'\r\n\r\nconst RichTextEditor = ({state, setState}) => {\r\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\r\n    \r\n    const onDragEnd = result => {\r\n        const { destination, source } = result\r\n        if( !destination ) {\r\n            return\r\n        }\r\n        if(destination.index === source.index ){\r\n            return\r\n        }\r\n        let oldState = Array.from(state)\r\n        const childNode = oldState.splice(source.index, 1)\r\n        oldState.splice(destination.index, 0, childNode[0])\r\n        setState(oldState)\r\n        Transforms.moveNodes(editor, { at: [source.index], to: [destination.index]})\r\n    } \r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n        <Slate editor={editor} value={state} onChange={value => setState(value)}>\r\n            <Toolbar />  \r\n            <Editor state={state}/>                    \r\n      </Slate>\r\n    </DragDropContext>\r\n  )\r\n}\r\n\r\nexport default RichTextEditor","import React, { useState } from 'react'\r\n\r\nimport RichTextEditor from '../super-charged-rte/src'\r\n\r\nconst initialValue = [\r\n    {\r\n      type: 'paragraph',\r\n      children: [\r\n        { text: 'This is editable ' },\r\n        { text: 'rich', bold: true },\r\n        { text: ' text, ' },\r\n        { text: 'much', italic: true },\r\n        { text: ' better than a ' },\r\n        { text: '<textarea>', code: true },\r\n        { text: '!' },\r\n      ],\r\n    },\r\n    {\r\n      type: 'paragraph',\r\n      children: [\r\n        {\r\n          text:\r\n            \"Since it's rich text, you can do things like turn a selection of text \",\r\n        },\r\n        { text: 'bold', bold: true },\r\n        {\r\n          text:\r\n            ', or add a semantically rendered block quote in the middle of the page, like this:',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: 'block-quote',\r\n      children: [{ text: 'A wise quote.' }],\r\n    },\r\n    {\r\n      type: 'paragraph',\r\n      children: [{ text: 'Try it out for yourself!' }],\r\n    },\r\n]\r\n  \r\nconst Layout = () => {\r\n    const [state, setState] = useState(initialValue) \r\n\r\n    return(\r\n        <RichTextEditor state={state} setState={setState}/>       \r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport Layout from './layout'\r\n\r\nexport default function App() {\r\n    return <Layout />\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './demo/app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}